{"version":3,"sources":["store/displayCart-slice.js","Components/Header/CartButton.js","Components/Header/NavBar.js","store/cart-slice.js","Components/Cart/CartItem.js","Components/Cart/CloseButton.js","store/checkOut-slice.js","Components/Cart/CheckOutButton.js","Components/Cart/Cart.js","store/fillDetails-slice.js","Components/Body/Product.js","store/renderProducts-slice.js","Components/Body/ProductPage.js","Components/Details/DetailsButton.js","Components/Details/DetailPage.js","Components/CheckOut/CheckOut.js","App.js","store/index.js","index.js"],"names":["displayCartSlice","createSlice","name","initialState","cartIsVisible","reducers","toggleDisplay","state","action","displayCartActions","actions","CartButton","cartQty","useSelector","updateCart","totalQty","dispatch","useDispatch","onClick","className","NavBar","cartSlice","items","totalCost","addItemToCart","newItem","payload","alreadyInCart","find","item","id","price","qty","totalPrice","push","title","removeItemFromCart","filter","cartActions","CartItem","props","total","toFixed","CloseButton","checkOutSlice","clientName","email","checkOutVisible","addNewClient","newClient","toggleCheckOutPage","checkOutActions","CheckOutButton","Cart","cartItems","cartCost","map","fillDetailsSlice","description","image","detailsVisible","addToDetails","newDetails","fillDetailsActions","Product","products","updateRenderProducts","renderedProductsArray","renderList","product","src","alt","renderProductsSlice","renderProducts","type","renderProductsActions","ProductPage","fetchProducts","a","axios","get","catch","err","console","log","response","data","useEffect","DetailsButton","DetailPage","detailTitle","updateDetails","detailDescription","detailImage","CheckOut","App","cartVisible","displayCart","detailPageVisible","checkOutPageVisible","updateCheckOut","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53f2d608.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// initialDisplayCartState = { cartIsVisible: false };\n\nconst displayCartSlice = createSlice({\n  name: \"displayCart\",\n  initialState: { cartIsVisible: false },\n  reducers: {\n    toggleDisplay(state, action) {\n      state.cartIsVisible = !state.cartIsVisible;\n    },\n  },\n});\n\nexport default displayCartSlice;\nexport const displayCartActions = displayCartSlice.actions;\n","import React from \"react\";\nimport \"./CartButton.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { displayCartActions } from \"../../store/displayCart-slice\";\n\nexport const CartButton = () => {\n  const cartQty = useSelector((state) => state.updateCart.totalQty);\n  const dispatch = useDispatch();\n  const toggleCartDisplayHandler = () => {\n    dispatch(displayCartActions.toggleDisplay());\n  };\n\n  return (\n    <button onClick={toggleCartDisplayHandler} className=\"navButton\">\n      <span className=\"btnName\">Cart</span>\n      <span className=\"btnNotif\">{cartQty}</span>\n    </button>\n  );\n};\n\nexport default CartButton;\n","import CartButton from \"./CartButton\";\nimport \"./NavBar.css\";\n\nconst NavBar = () => {\n  return (\n    <header className=\"navContainer\">\n      <h1>ReduxCart</h1>\n      <div>\n        <CartButton />\n      </div>\n    </header>\n  );\n};\n\nexport default NavBar;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQty: 0,\n    totalCost: 0,\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const alreadyInCart = state.items.find((item) => item.id === newItem.id);\n      state.totalQty++;\n      state.totalCost += newItem.price;\n      if (!alreadyInCart) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.title,\n          price: newItem.price,\n          qty: 1,\n          totalPrice: newItem.price,\n        });\n      } else {\n        alreadyInCart.qty++;\n        alreadyInCart.totalPrice += newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const alreadyInCart = state.items.find((item) => item.id === id);\n      state.totalQty--;\n      if (alreadyInCart.qty === 1) {\n        state.items = state.items.filter((item) => item.id !== id);\n      } else {\n        alreadyInCart.qty--;\n        alreadyInCart.totalPrice =\n          alreadyInCart.totalPrice - alreadyInCart.price;\n      }\n      state.totalCost -= alreadyInCart.price;\n    },\n  },\n});\n\nexport default cartSlice;\nexport const cartActions = cartSlice.actions;\n","import React from \"react\";\n// import classes from \"./CartItem.css\";\nimport { useDispatch } from \"react-redux\";\nimport { cartActions } from \"../../store/cart-slice\";\nimport \"./CartItem.css\";\n\nexport const CartItem = (props) => {\n  const dispatch = useDispatch();\n  const { title, qty, total, price, id } = props.item;\n  const addItemHandler = () => {\n    dispatch(\n      cartActions.addItemToCart({\n        id: id,\n        title,\n        price,\n      })\n    );\n  };\n\n  const removeItemHandler = () => {\n    dispatch(cartActions.removeItemFromCart(id));\n  };\n\n  return (\n    <div className=\"item\">\n      <div className=\"cartItemHeader\">\n        <div className=\"cartItemH3\">{title}</div>\n        <div className=\"price\">\n          ₹{total.toFixed(2)} <span className=\"itemprice\">₹{price}</span>\n        </div>\n      </div>\n      <div className=\"details\">\n        <div className=\"quantity\">\n          <div>x{qty}</div>\n        </div>\n        <div className=\"actions\">\n          <button className=\"minus\" onClick={removeItemHandler}>\n            -\n          </button>\n          <button className=\"add\" onClick={addItemHandler}>\n            +\n          </button>\n        </div>\n      </div>\n      {/* <hr /> */}\n    </div>\n  );\n};\n\nexport default CartItem;\n","import React from \"react\";\nimport \"./CloseButton.css\";\nimport { useDispatch } from \"react-redux\";\nimport { displayCartActions } from \"../../store/displayCart-slice\";\n\nexport const CloseButton = () => {\n  const dispatch = useDispatch();\n  const toggleCartDisplayHandler = () => {\n    dispatch(displayCartActions.toggleDisplay());\n  };\n  return (\n    <div className=\"closeBtnContainer\">\n      <button onClick={toggleCartDisplayHandler} className=\"closeButton\">\n        X\n      </button>\n    </div>\n  );\n};\n\nexport default CloseButton;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst checkOutSlice = createSlice({\n  name: \"checkOutPage\",\n  initialState: {\n    clientName: \"\",\n    email: \"\",\n    checkOutVisible: false,\n  },\n  reducers: {\n    addNewClient(state, action) {\n      const newClient = action.payload;\n      state.name = newClient.name;\n      state.email = newClient.email;\n      // state.checkOutVisible = !state.checkOutVisible;\n    },\n\n    toggleCheckOutPage(state, action) {\n      state.checkOutVisible = !state.checkOutVisible;\n    },\n  },\n});\n\nexport const checkOutActions = checkOutSlice.actions;\nexport default checkOutSlice;\n\n// import { createSlice } from \"@reduxjs/toolkit\";\n\n// const confirmationSlice = createSlice({\n//   name: \"confirmationPage\",\n//   initialState: {\n//     title: \"\",\n//     description: \"\",\n//     image: \"\",\n//     confirmationVisible: true,\n//   },\n//   reducers: {\n//     toggleConfirmation(state, action) {\n//         const newDetails = action.payload;\n//         state.title = newDetails.title;\n//         state.description = newDetails.description;\n//       state.confirmationVisible = !state.confirmationVisible;\n//     },\n//   },\n// });\n\n// export const confirmationActions = confirmationSlice.actions;\n// export default confirmationSlice;\n","import React from \"react\";\nimport \"./CheckOutButton.css\";\nimport { useDispatch } from \"react-redux\";\nimport { checkOutActions } from \"../../store/checkOut-slice\";\n\nexport const CheckOutButton = () => {\n  const dispatch = useDispatch();\n  const toggleCheckOutPagehandler = () => {\n    dispatch(checkOutActions.toggleCheckOutPage());\n  };\n  return (\n    <button onClick={toggleCheckOutPagehandler} className=\"checkoutButton\">\n      Checkout\n    </button>\n  );\n};\n\nexport default CheckOutButton;\n","import CartItem from \"./CartItem\";\nimport CloseButton from \"./CloseButton\";\nimport \"./Cart.css\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport CheckOutButton from \"./CheckOutButton\";\n\nexport const Cart = (props) => {\n  const cartItems = useSelector((state) => state.updateCart.items);\n  const cartCost = useSelector((state) => state.updateCart.totalCost);\n  return (\n    <div className=\"cartContainer\">\n      <div className=\"cartHeader\">\n        <h1 className=\"cartHeading\">Your Cart</h1>\n        <CloseButton />\n      </div>\n      <hr />\n      <ul>\n        {cartItems.map((item) => (\n          <CartItem\n            key={item.id}\n            item={{\n              id: item.id,\n              title: item.name,\n              qty: item.qty,\n              total: item.totalPrice,\n              price: item.price,\n            }}\n          />\n        ))}\n      </ul>\n      <hr />\n      <div className=\"cartCost\">\n        <h2>{`Total: ₹${cartCost.toFixed(2)}`}</h2>\n      </div>\n      <hr />\n      <div className=\"checkoutContainer\">\n        <CheckOutButton />\n      </div>\n    </div>\n  );\n};\n\nexport default Cart;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst fillDetailsSlice = createSlice({\n  name: \"fillDetailsPage\",\n  initialState: {\n    title: \"\",\n    description: \"\",\n    image: \"\",\n    detailsVisible: false,\n  },\n  reducers: {\n    addToDetails(state, action) {\n      const newDetails = action.payload;\n      state.title = newDetails.title;\n      state.description = newDetails.description;\n      state.detailsVisible = !state.detailsVisible;\n      state.image = newDetails.image;\n    },\n  },\n});\n\nexport const fillDetailsActions = fillDetailsSlice.actions;\nexport default fillDetailsSlice;\n","import React from \"react\";\nimport \"./Product.css\";\nimport { useDispatch } from \"react-redux\";\nimport { cartActions } from \"../../store/cart-slice\";\n// import { detailsActions } from \"../../store/details-slice\";\nimport { fillDetailsActions } from \"../../store/fillDetails-slice\";\nimport { useSelector } from \"react-redux\";\n\nexport const Product = () => {\n  const products = useSelector(\n    (state) => state.updateRenderProducts.renderedProductsArray\n  );\n  const dispatch = useDispatch();\n\n  const renderList = products.map((product) => {\n    const { id, title, price, image, description } = product;\n    const addToCartHandler = () => {\n      dispatch(\n        cartActions.addItemToCart({\n          id,\n          title,\n          price,\n        })\n      );\n    };\n\n    const detailsHandler = () => {\n      dispatch(\n        fillDetailsActions.addToDetails({\n          title,\n          description,\n          image,\n        })\n      );\n    };\n    return (\n      <div>\n        <div className=\"productContainer\" key={id}>\n          <div className=\"productBody\">\n            <div className=\"productImage\">\n              <img src={image} alt={title} />\n            </div>\n            <div className=\"productHeading\">\n              <h2>{title}</h2>\n              <hr />\n            </div>\n            <div className=\"productFooter\">\n              ₹{price.toFixed(2)}\n              <span>\n                <button onClick={detailsHandler} className=\"detailsButton\">\n                  View\n                </button>\n                <button onClick={addToCartHandler} className=\"productButton\">\n                  Add to Cart\n                </button>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  return <>{renderList}</>;\n};\n\nexport default Product;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst renderProductsSlice = createSlice({\n  name: \"productRenderPage\",\n  initialState: {\n    renderedProductsArray: [\n      //   {\n      //     id: 1,\n      //     price: 6,\n      //     title: \"My first product\",\n      //     description: \"djh djhdjhd dg jsjs\",\n      //   },\n      //   {\n      //     id: 2,\n      //     price: 5,\n      //     title: \"My second product\",\n      //     description: \"jd sjhjh aj dj a\",\n      //   },\n    ],\n  },\n  reducers: {\n    renderProducts(state, { type, payload }) {\n      return {\n        ...state,\n        renderedProductsArray: payload /*[action.payload] */,\n      };\n    },\n  },\n});\n\nexport default renderProductsSlice;\nexport const renderProductsActions = renderProductsSlice.actions;\n","import React, { useEffect } from \"react\";\nimport Product from \"./Product\";\nimport \"./ProductPage.css\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\nimport { renderProductsActions } from \"../../store/renderProducts-slice\";\n\nexport const ProductPage = () => {\n  const products = useSelector(\n    (state) => state.updateRenderProducts.renderedProductsArray\n  );\n\n  const dispatch = useDispatch();\n\n  const fetchProducts = async () => {\n    const response = await axios\n      .get(\"https://fakestoreapi.com/products\")\n      .catch((err) => {\n        console.log(\"Err\", err);\n      });\n    // console.log(response.data);\n    dispatch(renderProductsActions.renderProducts(response.data));\n  };\n\n  useEffect(() => {\n    fetchProducts();\n  }, []);\n\n  // console.log(\"PRODUCTS:\", products);\n  return (\n    <div className=\"productPageContainer\">\n      <Product />\n    </div>\n  );\n};\n\nexport default ProductPage;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fillDetailsActions } from \"../../store/fillDetails-slice\";\nimport \"./DetailsButton.css\";\n\nexport const DetailsButton = () => {\n  const dispatch = useDispatch();\n  const detailsHandler = () => {\n    dispatch(\n      fillDetailsActions.addToDetails({\n        title: \"\",\n        description: \"\",\n      })\n    );\n  };\n  return (\n    <button className=\"detailsPageButton\" onClick={detailsHandler}>\n      ←\n    </button>\n  );\n};\n\nexport default DetailsButton;\n","import React from \"react\";\nimport DetailsButton from \"./DetailsButton\";\nimport { useSelector } from \"react-redux\";\nimport \"./DetailsPage.css\";\n\nexport const DetailPage = (props) => {\n  const detailTitle = useSelector((state) => state.updateDetails.title);\n  const detailDescription = useSelector(\n    (state) => state.updateDetails.description\n  );\n  const detailImage = useSelector((state) => state.updateDetails.image);\n\n  return (\n    <div className=\"detailsContainer\">\n      <h1 className=\"detailsPageHeader\">{detailTitle}</h1>\n      <div className=\"detailsBodyContainer\">\n        <img src={detailImage} alt={detailTitle} />\n        <p className=\"detailsPageDescription\">{detailDescription}</p>\n      </div>\n      <div className=\"detailsPageButtonContainer\">\n        <DetailsButton />\n      </div>\n    </div>\n  );\n};\n\nexport default DetailPage;\n","import React from \"react\";\nimport \"./CheckOut.css\";\nimport { useDispatch } from \"react-redux\";\nimport { checkOutActions } from \"../../store/checkOut-slice\";\nimport { useState } from \"react\";\n\nexport const CheckOut = () => {\n  const dispatch = useDispatch();\n\n  // const [enteredName, setEnteredName] = useState(\"\");\n  // const [enteredMail, setEnteredMail] = useState(\"\");\n\n  // const nameChangehandler = (event) => {\n  //   setEnteredName(event.target.value);\n  // };\n\n  // const mailChangehandler = (event) => {\n  //   setEnteredMail(event.target.value);\n  // };\n\n  const formHandler = (/*event*/) => {\n    // event.preventDefault();\n    // dispatch(\n    //   checkOutActions.addNewClient({\n    //     name: enteredName,\n    //     mail: enteredMail,\n    //   })\n    // );\n    // dispatch(confirmationActions.toggleConfirmation());\n    dispatch(checkOutActions.toggleCheckOutPage());\n  };\n\n  // const toggleCheckouthandler = () => {\n  //   dispatch(checkOutActions.toggleCheckOutPage());\n  // };\n\n  // const toggleConfirmation = (event) => {\n  //   preventDefault(event);\n  //   dispatch(confirmationActions.toggleConfirmation());\n  // };\n\n  return (\n    <div>\n      <div className=\"checkOutContainer\">\n        <h2>Your Order is Confirmed</h2>\n        {/* <input\n          onChange={nameChangehandler}\n          type=\"text\"\n          placeholder=\"Enter your Name\"\n        ></input>\n        <input\n          onChange={mailChangehandler}\n          type=\"email\"\n          placeholder=\"Enter your Email\"\n        ></input> */}\n        {/* <input type=\"checkbox\" name=\"m\" /> */}\n        <button className=\"checkOutPageBtn\" onClick={formHandler}>\n          Continue Shopping\n        </button>\n        {/* </form> */}\n      </div>\n    </div>\n  );\n};\n\nexport default CheckOut;\n","import NavBar from \"./Components/Header/NavBar\";\nimport Cart from \"./Components/Cart/Cart\";\nimport ProductPage from \"./Components/Body/ProductPage\";\nimport { useSelector } from \"react-redux\";\nimport DetailPage from \"./Components/Details/DetailPage\";\nimport CheckOut from \"./Components/CheckOut/CheckOut\";\n\nfunction App() {\n  const cartVisible = useSelector((state) => state.displayCart.cartIsVisible);\n  const detailPageVisible = useSelector(\n    (state) => state.updateDetails.detailsVisible\n  );\n  const checkOutPageVisible = useSelector(\n    (state) => state.updateCheckOut.checkOutVisible\n  );\n\n  return (\n    <div className=\"app\">\n      {checkOutPageVisible && <CheckOut />}\n      {detailPageVisible && <DetailPage />}\n      {!detailPageVisible && !checkOutPageVisible && <NavBar />}\n      {!detailPageVisible && !checkOutPageVisible && cartVisible && <Cart />}\n      {!detailPageVisible && !checkOutPageVisible && <ProductPage />}\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport displayCartSlice from \"./displayCart-slice\";\nimport cartSlice from \"./cart-slice\";\n// import detailsSlice from \"./details-slice\";\nimport fillDetailsSlice from \"./fillDetails-slice\";\nimport renderProductsSlice from \"./renderProducts-slice\";\nimport checkOutSlice from \"./checkOut-slice\";\n// import confirmationSlice from \"./confirmation-slice\";\n\nconst store = configureStore({\n  reducer: {\n    displayCart: displayCartSlice.reducer,\n    updateCart: cartSlice.reducer,\n    // displayDetails: detailsSlice.reducer,\n    updateDetails: fillDetailsSlice.reducer,\n    updateRenderProducts: renderProductsSlice.reducer,\n    updateCheckOut: checkOutSlice.reducer,\n    // updateConfirmation: confirmationSlice.reducer,\n  },\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}